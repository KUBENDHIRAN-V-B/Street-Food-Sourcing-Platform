import React, { useState, useEffect } from 'react';
import { useAuth } from '../../context/AuthContext';

function VoiceOrdering() {
  const { apiCall } = useAuth();
  const [isListening, setIsListening] = useState(false);
  const [transcript, setTranscript] = useState('');
  const [voiceCommands, setVoiceCommands] = useState([]);
  const [selectedLanguage, setSelectedLanguage] = useState('en-IN');
  const [cart, setCart] = useState([]);
  const [recognition, setRecognition] = useState(null);
  const [isSupported, setIsSupported] = useState(false);
  const [searchResults, setSearchResults] = useState([]);
  const [showSearchResults, setShowSearchResults] = useState(false);

  const languages = [
    { code: 'en-IN', name: 'English (India)', flag: 'üáÆüá≥' },
    { code: 'hi-IN', name: '‡§π‡§ø‡§Ç‡§¶‡•Ä (Hindi)', flag: 'üáÆüá≥' },
    { code: 'bn-IN', name: '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ (Bengali)', flag: 'üáÆüá≥' },
    { code: 'ta-IN', name: '‡Æ§‡ÆÆÔøΩÔøΩ‡Æ¥‡Øç (Tamil)', flag: 'üáÆüá≥' },
    { code: 'te-IN', name: '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å (Telugu)', flag: 'üáÆüá≥' },
    { code: 'mr-IN', name: '‡§Æ‡§∞‡§æ‡§†‡•Ä (Marathi)', flag: 'üáÆüá≥' },
    { code: 'gu-IN', name: '‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä (Gujarati)', flag: 'üáÆüá≥' },
    { code: 'kn-IN', name: '‡≤ï‡≤®‡≥ç‡≤®‡≤° (Kannada)', flag: 'üáÆüá≥' }
  ];

  const voiceCommands_en = [
    "Add 5 kg onions to cart",
    "Show me tomatoes",
    "What's the price of rice?",
    "Remove onions from cart",
    "Place order",
    "Show my cart",
    "Find organic vegetables",
    "Search for spices"
  ];

  const voiceCommands_hi = [
    "‡§ï‡§æ‡§∞‡•ç‡§ü ‡§Æ‡•á‡§Ç 5 ‡§ï‡§ø‡§≤‡•ã ‡§™‡•ç‡§Ø‡§æ‡§ú ‡§ú‡•ã‡§°‡§º‡•á‡§Ç",
    "‡§Æ‡•Å‡§ù‡•á ‡§ü‡§Æ‡§æ‡§ü‡§∞ ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç",
    "‡§ö‡§æ‡§µ‡§≤ ‡§ï‡•Ä ‡§ï‡•Ä‡§Æ‡§§ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
    "‡§ï‡§æ‡§∞‡•ç‡§ü ‡§∏‡•á ‡§™‡•ç‡§Ø‡§æ‡§ú ‡§π‡§ü‡§æ‡§è‡§Ç",
    "‡§ë‡§∞‡•ç‡§°‡§∞ ‡§¶‡•á‡§Ç",
    "‡§Æ‡•á‡§∞‡§æ ‡§ï‡§æ‡§∞‡•ç‡§ü ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç",
    "‡§ú‡•à‡§µ‡§ø‡§ï ‡§∏‡§¨‡•ç‡§ú‡§ø‡§Ø‡§æ‡§Ç ‡§ñ‡•ã‡§ú‡•á‡§Ç",
    "‡§Æ‡§∏‡§æ‡§≤‡•á ‡§ñ‡•ã‡§ú‡•á‡§Ç"
  ];

  useEffect(() => {
    // Check if browser supports speech recognition
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      setIsSupported(true);
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      const recognitionInstance = new SpeechRecognition();
      
      recognitionInstance.continuous = true;
      recognitionInstance.interimResults = true;
      recognitionInstance.lang = selectedLanguage;

      recognitionInstance.onresult = (event) => {
        let finalTranscript = '';
        for (let i = event.resultIndex; i < event.results.length; i++) {
          if (event.results[i].isFinal) {
            finalTranscript += event.results[i][0].transcript;
          }
        }
        if (finalTranscript) {
          setTranscript(finalTranscript);
          processVoiceCommand(finalTranscript);
        }
      };

      recognitionInstance.onerror = (event) => {
        console.error('Speech recognition error:', event.error);
        setIsListening(false);
      };

      recognitionInstance.onend = () => {
        setIsListening(false);
      };

      setRecognition(recognitionInstance);
    }

    // Set voice commands based on language
    if (selectedLanguage.startsWith('hi')) {
      setVoiceCommands(voiceCommands_hi);
    } else {
      setVoiceCommands(voiceCommands_en);
    }
  }, [selectedLanguage]);

  const startListening = () => {
    if (recognition && !isListening) {
      recognition.lang = selectedLanguage;
      recognition.start();
      setIsListening(true);
      setTranscript('');
    }
  };

  const stopListening = () => {
    if (recognition && isListening) {
      recognition.stop();
      setIsListening(false);
    }
  };

  const processVoiceCommand = (command) => {
    const lowerCommand = command.toLowerCase();
    
    // English commands
    if (lowerCommand.includes('add') && lowerCommand.includes('cart')) {
      const match = lowerCommand.match(/add (\d+) ?(kg|kilogram|kilo)? ?(.+?) to cart/);
      if (match) {
        const quantity = parseInt(match[1]);
        const item = match[3];
        addToCartVoice(item, quantity);
      }
    } else if (lowerCommand.includes('show') && lowerCommand.includes('cart')) {
      showCart();
    } else if (lowerCommand.includes('show me') || lowerCommand.includes('show')) {
      // Handle "Show me [product]" commands
      const showMatch = lowerCommand.match(/show (?:me )?(.+)/);
      if (showMatch && !showMatch[1].includes('cart')) {
        const product = showMatch[1].trim();
        searchAndDisplayProducts(product);
      }
    } else if (lowerCommand.includes('place order')) {
      placeOrderVoice();
    } else if (lowerCommand.includes('remove') && lowerCommand.includes('cart')) {
      const match = lowerCommand.match(/remove (.+?) from cart/);
      if (match) {
        removeFromCartVoice(match[1]);
      }
    } else if (lowerCommand.includes('search') || lowerCommand.includes('find')) {
      const match = lowerCommand.match(/(?:search|find) (?:for )?(.+)/);
      if (match) {
        searchAndDisplayProducts(match[1]);
      }
    } else if (lowerCommand.includes('price') || lowerCommand.includes('cost')) {
      // Handle price queries like "What's the price of rice?"
      const priceMatch = lowerCommand.match(/(?:price|cost) (?:of )?(.+)/);
      if (priceMatch) {
        getProductPrice(priceMatch[1]);
      }
    }
    
    // Hindi commands (basic pattern matching)
    else if (lowerCommand.includes('‡§ú‡•ã‡§°‡§º‡•á‡§Ç') || lowerCommand.includes('add')) {
      // Handle Hindi add commands
      speakResponse("‡§Ü‡§™‡§ï‡§æ ‡§Ü‡§á‡§ü‡§Æ ‡§ï‡§æ‡§∞‡•ç‡§ü ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à", "Item added to cart");
    } else if (lowerCommand.includes('‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç') || lowerCommand.includes('show')) {
      const hindiShowMatch = lowerCommand.match(/(?:‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç|show) (?:‡§Æ‡•Å‡§ù‡•á )?(.+)/);
      if (hindiShowMatch && !hindiShowMatch[1].includes('‡§ï‡§æ‡§∞‡•ç‡§ü')) {
        const product = hindiShowMatch[1].trim();
        searchAndDisplayProducts(product);
      } else {
        speakResponse("‡§Ø‡§π‡§æ‡§Å ‡§Ü‡§™‡§ï‡§æ ‡§ï‡§æ‡§∞‡•ç‡§ü ‡§π‡•à", "Here is your cart");
      }
    }
  };

  const addToCartVoice = (item, quantity) => {
    const newItem = {
      id: Date.now(),
      name: item,
      quantity: quantity,
      price: Math.floor(Math.random() * 100) + 20 // Mock price
    };
    setCart([...cart, newItem]);
    speakResponse(`Added ${quantity} ${item} to cart`, `‡§ï‡§æ‡§∞‡•ç‡§ü ‡§Æ‡•á‡§Ç ${quantity} ${item} ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ`);
  };

  const removeFromCartVoice = (item) => {
    setCart(cart.filter(cartItem => !cartItem.name.toLowerCase().includes(item)));
    speakResponse(`Removed ${item} from cart`, `‡§ï‡§æ‡§∞‡•ç‡§ü ‡§∏‡•á ${item} ‡§π‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ`);
  };

  const showCart = () => {
    if (cart.length === 0) {
      speakResponse("Your cart is empty", "‡§Ü‡§™‡§ï‡§æ ‡§ï‡§æ‡§∞‡•ç‡§ü ‡§ñ‡§æ‡§≤‡•Ä ‡§π‡•à");
    } else {
      const itemCount = cart.length;
      speakResponse(`You have ${itemCount} items in your cart`, `‡§Ü‡§™‡§ï‡•á ‡§ï‡§æ‡§∞‡•ç‡§ü ‡§Æ‡•á‡§Ç ${itemCount} ‡§Ü‡§á‡§ü‡§Æ ÔøΩÔøΩÔøΩ‡•à‡§Ç`);
    }
  };

  const placeOrderVoice = () => {
    if (cart.length > 0) {
      speakResponse("Order placed successfully", "‡§ë‡§∞‡•ç‡§°‡§∞ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ");
      setCart([]);
    } else {
      speakResponse("Your cart is empty. Please add items first", "‡§Ü‡§™‡§ï‡§æ ‡§ï‡§æ‡§∞‡•ç‡§ü ‡§ñ‡§æ‡§≤‡•Ä ‡§π‡•à‡•§ ‡§™‡§π‡§≤‡•á ‡§Ü‡§á‡§ü‡§Æ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç");
    }
  };

  const searchProducts = (query) => {
    speakResponse(`Searching for ${query}`, `${query} ‡§ñ‡•ã‡§ú‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à`);
  };

  const searchAndDisplayProducts = async (query) => {
    try {
      // Mock product data - in a real app, this would be an API call
      const mockProducts = [
        { id: 1, name: 'Fresh Tomatoes', price: 30, unit: 'kg', stock: 300, description: 'Fresh red tomatoes, perfect for cooking', image: 'üçÖ' },
        { id: 2, name: 'Cherry Tomatoes', price: 80, unit: 'kg', stock: 50, description: 'Sweet cherry tomatoes', image: 'üçÖ' },
        { id: 3, name: 'Organic Tomatoes', price: 45, unit: 'kg', stock: 150, description: 'Organic red tomatoes', image: 'üçÖ' },
        { id: 4, name: 'Fresh Onions', price: 25, unit: 'kg', stock: 500, description: 'Premium red onions from Punjab farms', image: 'üßÖ' },
        { id: 5, name: 'Basmati Rice', price: 120, unit: 'kg', stock: 200, description: 'Premium basmati rice', image: 'üåæ' },
        { id: 6, name: 'Green Chilies', price: 80, unit: 'kg', stock: 50, description: 'Fresh green chilies with perfect heat level', image: 'üå∂Ô∏è' },
        { id: 7, name: 'Organic Vegetables', price: 60, unit: 'kg', stock: 100, description: 'Mixed organic vegetables', image: 'ü•¨' },
        { id: 8, name: 'Spice Mix', price: 150, unit: 'kg', stock: 75, description: 'Traditional Indian spice mix', image: 'üå∂Ô∏è' }
      ];

      // Filter products based on query
      const filteredProducts = mockProducts.filter(product => 
        product.name.toLowerCase().includes(query.toLowerCase()) ||
        product.description.toLowerCase().includes(query.toLowerCase())
      );

      setSearchResults(filteredProducts);
      setShowSearchResults(true);

      if (filteredProducts.length > 0) {
        const resultCount = filteredProducts.length;
        const firstProduct = filteredProducts[0];
        speakResponse(
          `Found ${resultCount} results for ${query}. First result: ${firstProduct.name} at ‚Çπ${firstProduct.price} per ${firstProduct.unit}`,
          `${query} ‡§ï‡•á ‡§≤‡§ø‡§è ${resultCount} ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§Æ‡§ø‡§≤‡•á‡•§ ‡§™‡§π‡§≤‡§æ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ: ${firstProduct.name} ‚Çπ${firstProduct.price} ‡§™‡•ç‡§∞‡§§‡§ø ${firstProduct.unit}`
        );
      } else {
        speakResponse(
          `No products found for ${query}. Try searching for tomatoes, onions, rice, or spices`,
          `${query} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§ ‡§ü‡§Æ‡§æ‡§ü‡§∞, ‡§™‡•ç‡§Ø‡§æ‡§ú, ‡§ö‡§æ‡§µ‡§≤, ‡§Ø‡§æ ‡§Æ‡§∏‡§æ‡§≤‡•á ‡§ñ‡•ã‡§ú‡§®‡•á ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç`
        );
      }
    } catch (error) {
      console.error('Error searching products:', error);
      speakResponse(
        `Sorry, there was an error searching for ${query}`,
        `‡§ñ‡•Å‡§∂‡•Ä ‡§π‡•à, ${query} ‡§ñ‡•ã‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à`
      );
    }
  };

  const getProductPrice = (productName) => {
    // Mock price data
    const priceData = {
      'tomatoes': { price: 30, unit: 'kg' },
      'tomato': { price: 30, unit: 'kg' },
      'onions': { price: 25, unit: 'kg' },
      'onion': { price: 25, unit: 'kg' },
      'rice': { price: 120, unit: 'kg' },
      'chilies': { price: 80, unit: 'kg' },
      'chili': { price: 80, unit: 'kg' },
      'spices': { price: 150, unit: 'kg' },
      'spice': { price: 150, unit: 'kg' }
    };

    const product = productName.toLowerCase().trim();
    const priceInfo = priceData[product];

    if (priceInfo) {
      speakResponse(
        `The price of ${productName} is ‚Çπ${priceInfo.price} per ${priceInfo.unit}`,
        `${productName} ‡§ï‡•Ä ‡§ï‡•Ä‡§Æ‡§§ ‚Çπ${priceInfo.price} ‡§™‡•ç‡§∞‡§§‡§ø ${priceInfo.unit} ‡§π‡•à`
      );
    } else {
      speakResponse(
        `Sorry, I don't have price information for ${productName}. Try asking about tomatoes, onions, rice, or spices`,
        `‡§ñ‡•Å‡§∂‡•Ä ‡§π‡•à, ‡§Æ‡•á‡§∞‡•á ‡§™‡§æ‡§∏ ${productName} ‡§ï‡•Ä ‡§ï‡•Ä‡§Æ‡§§ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§ü‡§Æ‡§æ‡§ü‡§∞, ‡§™‡•ç‡§Ø‡§æ‡§ú, ‡§ö‡§æ‡§µ‡§≤, ‡§Ø‡§æ ‡§Æ‡§∏‡§æ‡§≤‡•á ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡§®‡•á ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç`
      );
    }
  };

  const addProductToCart = (product, quantity = 1) => {
    const newItem = {
      id: Date.now(),
      name: product.name,
      quantity: quantity,
      price: product.price
    };
    setCart([...cart, newItem]);
    speakResponse(
      `Added ${quantity} kg of ${product.name} to cart at ‚Çπ${product.price} per kg`,
      `‡§ï‡§æ‡§∞‡•ç‡§ü ‡§Æ‡•á‡§Ç ${quantity} ‡§ï‡§ø‡§≤‡•ã ${product.name} ‚Çπ${product.price} ‡§™‡•ç‡§∞‡§§‡§ø ‡§ï‡§ø‡§≤‡•ã ‡§ï‡•Ä ‡§¶‡§∞ ‡§∏‡•á ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ`
    );
  };

  const speakResponse = (englishText, hindiText) => {
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance();
      utterance.text = selectedLanguage.startsWith('hi') ? hindiText : englishText;
      utterance.lang = selectedLanguage;
      utterance.rate = 0.8;
      speechSynthesis.speak(utterance);
    }
  };

  const executeCommand = (command) => {
    setTranscript(command);
    processVoiceCommand(command);
  };

  if (!isSupported) {
    return (
      <div className="container" style={{ padding: '2rem 0', textAlign: 'center' }}>
        <div className="card">
          <h2>üé§ Voice Ordering Not Supported</h2>
          <p>Your browser doesn't support speech recognition. Please use a modern browser like Chrome or Edge.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="container" style={{ padding: '2rem 0' }}>
      <div style={{ marginBottom: '2rem' }}>
        <h1 style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
          üé§ Voice Ordering System
        </h1>
        <p style={{ color: '#666' }}>
          Order ingredients using voice commands in your preferred language
        </p>
      </div>

      {/* Language Selection */}
      <div className="card" style={{ marginBottom: '2rem' }}>
        <div className="card-header">
          <h3 style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
            üåê Select Language
          </h3>
        </div>
        <div className="row">
          {languages.map(lang => (
            <div key={lang.code} className="col-4">
              <button
                className={`btn ${selectedLanguage === lang.code ? 'btn-primary' : 'btn-outline'}`}
                style={{ width: '100%', marginBottom: '0.5rem' }}
                onClick={() => setSelectedLanguage(lang.code)}
              >
                {lang.flag} {lang.name}
              </button>
            </div>
          ))}
        </div>
      </div>

      {/* Voice Control Panel */}
      <div className="card" style={{ marginBottom: '2rem' }}>
        <div className="card-header">
          <h3 style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
            üéôÔ∏è Voice Control
          </h3>
        </div>
        <div style={{ textAlign: 'center', padding: '2rem 0' }}>
          <div style={{ 
            width: '150px', 
            height: '150px', 
            borderRadius: '50%', 
            background: isListening ? 'linear-gradient(135deg, #dc3545 0%, #fd7e14 100%)' : 'linear-gradient(135deg, #28a745 0%, #20c997 100%)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            margin: '0 auto 2rem auto',
            cursor: 'pointer',
            transition: 'all 0.3s ease',
            transform: isListening ? 'scale(1.1)' : 'scale(1)',
            boxShadow: isListening ? '0 0 30px rgba(220, 53, 69, 0.5)' : '0 0 20px rgba(40, 167, 69, 0.3)'
          }}
          onClick={isListening ? stopListening : startListening}
          >
            <div style={{ fontSize: '3rem', color: 'white' }}>
              {isListening ? 'üî¥' : 'üé§'}
            </div>
          </div>
          
          <h3 style={{ marginBottom: '1rem' }}>
            {isListening ? 'Listening...' : 'Tap to Start Voice Ordering'}
          </h3>
          
          {transcript && (
            <div style={{ 
              background: '#f8f9fa',
              padding: '1rem',
              borderRadius: '8px',
              marginBottom: '1rem',
              border: '2px solid #e9ecef'
            }}>
              <h4 style={{ marginBottom: '0.5rem' }}>You said:</h4>
              <p style={{ fontSize: '1.1rem', fontStyle: 'italic', color: '#333' }}>
                "{transcript}"
              </p>
            </div>
          )}

          <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center', flexWrap: 'wrap' }}>
            <button 
              className="btn btn-primary"
              onClick={startListening}
              disabled={isListening}
            >
              üé§ Start Listening
            </button>
            <button 
              className="btn btn-secondary"
              onClick={stopListening}
              disabled={!isListening}
            >
              ‚èπÔ∏è Stop Listening
            </button>
          </div>
        </div>
      </div>

      {/* Sample Voice Commands */}
      <div className="card" style={{ marginBottom: '2rem' }}>
        <div className="card-header">
          <h3 style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
            üí¨ Sample Voice Commands
          </h3>
        </div>
        <div className="row">
          {voiceCommands.map((command, index) => (
            <div key={index} className="col-2">
              <div 
                style={{ 
                  background: '#f8f9fa',
                  padding: '1rem',
                  borderRadius: '8px',
                  marginBottom: '1rem',
                  cursor: 'pointer',
                  border: '2px solid transparent',
                  transition: 'all 0.3s ease'
                }}
                onClick={() => executeCommand(command)}
                onMouseEnter={(e) => e.target.style.borderColor = '#667eea'}
                onMouseLeave={(e) => e.target.style.borderColor = 'transparent'}
              >
                <div style={{ fontSize: '1.5rem', marginBottom: '0.5rem', textAlign: 'center' }}>
                  üó£Ô∏è
                </div>
                <p style={{ fontSize: '0.875rem', textAlign: 'center', margin: 0 }}>
                  "{command}"
                </p>
              </div>
            </div>
          ))}
        </div>
        <div style={{ textAlign: 'center', marginTop: '1rem' }}>
          <p style={{ fontSize: '0.875rem', color: '#666' }}>
            Click on any command to try it out, or speak naturally!
          </p>
        </div>
      </div>

      {/* Search Results */}
      {showSearchResults && searchResults.length > 0 && (
        <div className="card" style={{ marginBottom: '2rem' }}>
          <div className="card-header">
            <h3 style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
              üîç Search Results ({searchResults.length} found)
            </h3>
            <button 
              className="btn btn-outline btn-small"
              onClick={() => setShowSearchResults(false)}
              style={{ marginLeft: 'auto' }}
            >
              ‚úï Close
            </button>
          </div>
          <div className="row">
            {searchResults.map(product => (
              <div key={product.id} className="col-3">
                <div style={{ 
                  background: '#f8f9fa',
                  padding: '1rem',
                  borderRadius: '8px',
                  marginBottom: '1rem',
                  border: '2px solid #e9ecef',
                  transition: 'all 0.3s ease'
                }}>
                  <div style={{ fontSize: '3rem', textAlign: 'center', marginBottom: '1rem' }}>
                    {product.image}
                  </div>
                  <h4 style={{ marginBottom: '0.5rem', textAlign: 'center' }}>{product.name}</h4>
                  <p style={{ fontSize: '0.875rem', color: '#666', marginBottom: '1rem', textAlign: 'center' }}>
                    {product.description}
                  </p>
                  <div style={{ textAlign: 'center', marginBottom: '1rem' }}>
                    <div style={{ fontSize: '1.25rem', fontWeight: 'bold', color: '#28a745' }}>
                      ‚Çπ{product.price} per {product.unit}
                    </div>
                    <div style={{ fontSize: '0.875rem', color: '#666' }}>
                      Stock: {product.stock} {product.unit}
                    </div>
                  </div>
                  <div style={{ display: 'flex', gap: '0.5rem', justifyContent: 'center' }}>
                    <button 
                      className="btn btn-primary btn-small"
                      onClick={() => addProductToCart(product, 1)}
                    >
                      Add 1kg
                    </button>
                    <button 
                      className="btn btn-outline btn-small"
                      onClick={() => addProductToCart(product, 5)}
                    >
                      Add 5kg
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Voice Cart */}
      {cart.length > 0 && (
        <div className="card" style={{ marginBottom: '2rem' }}>
          <div className="card-header">
            <h3 style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
              üõí Voice Cart ({cart.length} items)
            </h3>
          </div>
          <div className="table-responsive">
            <table className="table">
              <thead>
                <tr>
                  <th>Item</th>
                  <th>Quantity</th>
                  <th>Price</th>
                  <th>Total</th>
                  <th>Action</th>
                </tr>
              </thead>
              <tbody>
                {cart.map(item => (
                  <tr key={item.id}>
                    <td>{item.name}</td>
                    <td>{item.quantity} kg</td>
                    <td>‚Çπ{item.price}</td>
                    <td>‚Çπ{item.price * item.quantity}</td>
                    <td>
                      <button 
                        className="btn btn-danger btn-small"
                        onClick={() => removeFromCartVoice(item.name)}
                      >
                        Remove
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          <div style={{ textAlign: 'right', padding: '1rem' }}>
            <h4>Total: ‚Çπ{cart.reduce((sum, item) => sum + (item.price * item.quantity), 0)}</h4>
            <button 
              className="btn btn-success"
              onClick={placeOrderVoice}
              style={{ marginTop: '1rem' }}
            >
              üõí Place Order via Voice
            </button>
          </div>
        </div>
      )}

      {/* Voice Features */}
      <div className="card">
        <div className="card-header">
          <h3 style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
            ‚ú® Voice Features
          </h3>
        </div>
        <div className="row">
          <div className="col-3">
            <div style={{ textAlign: 'center', padding: '1rem' }}>
              <div style={{ fontSize: '2rem', marginBottom: '1rem' }}>üåç</div>
              <h4>Multi-Language</h4>
              <p style={{ fontSize: '0.875rem', color: '#666' }}>
                Support for 8+ Indian languages including Hindi, Bengali, Tamil, and more
              </p>
            </div>
          </div>
          <div className="col-3">
            <div style={{ textAlign: 'center', padding: '1rem' }}>
              <div style={{ fontSize: '2rem', marginBottom: '1rem' }}>üß†</div>
              <h4>Smart Recognition</h4>
              <p style={{ fontSize: '0.875rem', color: '#666' }}>
                AI-powered speech recognition that understands natural language commands
              </p>
            </div>
          </div>
          <div className="col-3">
            <div style={{ textAlign: 'center', padding: '1rem' }}>
              <div style={{ fontSize: '2rem', marginBottom: '1rem' }}>‚ö°</div>
              <h4>Instant Response</h4>
              <p style={{ fontSize: '0.875rem', color: '#666' }}>
                Real-time voice feedback and confirmation in your selected language
              </p>
            </div>
          </div>
          <div className="col-3">
            <div style={{ textAlign: 'center', padding: '1rem' }}>
              <div style={{ fontSize: '2rem', marginBottom: '1rem' }}>üì±</div>
              <h4>Hands-Free</h4>
              <p style={{ fontSize: '0.875rem', color: '#666' }}>
                Perfect for busy vendors who need to order while working
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default VoiceOrdering;